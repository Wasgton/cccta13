<?php

namespace Tests\Services;

use App\Exceptions\EmailAlreadyRegisteredException;
use App\Exceptions\InvalidCPFException;
use App\Exceptions\InvalidEmailException;
use App\Exceptions\InvalidNameException;
use App\Services\AccountService;
use PHPUnit\Framework\TestCase;
class AccountServiceTest extends TestCase
{
    private $faker;

    protected function setUp(): void
    {
        $this->faker = \Faker\Factory::create();
        $this->faker->addProvider(new \Faker\Provider\pt_BR\Person($this->faker));
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_should_create_a_passenger(): void
    {
        $passengerData = [
            'name' => $this->faker->name,
            'email' => $this->faker->email,
            'cpf' => $this->faker->cpf(false),
            'isPassenger' => 1,
        ];
        $response = (new AccountService())->signUp($passengerData);
        $this->assertNotEmpty($response['account_id']);
        $this->assertNotEmpty($response['verification_code']);
    }

    public function test_should_not_create_a_passenger_if_email_is_already_registered()
    {
        $firstPassengerData = [
            'name' => $this->faker->name,
            'email' => $this->faker->email,
            'cpf' => $this->faker->cpf(false),
            'isPassenger' => 1,
        ];
        $accountService = new AccountService();
        $accountService->signUp($firstPassengerData);

        $secondPassengerData = [
            'name' => $this->faker->name,
            'email' => $firstPassengerData['email'],
            'cpf' => $this->faker->cpf(false),
            'isPassenger' => 1,
        ];
        $this->expectException(EmailAlreadyRegisteredException::class);
        $accountService->signUp($secondPassengerData);

    }

    public function test_should_not_create_a_passenger_with_invalid_email()
    {
        $firstPassengerData = [
            'name' => $this->faker->name,
            'email' => $this->faker->freeEmailDomain,
            'cpf' => $this->faker->cpf(false),
            'isPassenger' => 1,
        ];
        $this->expectException(InvalidEmailException::class);
        $passengers = (new AccountService())->signUp($firstPassengerData);
    }

    public function test_should_not_create_a_passenger_with_invalid_cpf()
    {
        $firstPassengerData = [
            'name' => $this->faker->name,
            'email' => $this->faker->safeEmail,
            'cpf' => '98765432122',
            'isPassenger' => 1,
        ];
        $this->expectException(InvalidCPFException::class);
        $passengers = (new AccountService())->signUp($firstPassengerData);
    }

    public function test_should_not_create_a_passenger_with_invalid_name()
    {
        $firstPassengerData = [
            'name' => $this->faker->firstName,
            'email' => $this->faker->safeEmail,
            'cpf' => $this->faker->cpf(false),
            'isPassenger' => 1,
        ];
        $this->expectException(InvalidNameException::class);
        $passengers = (new AccountService())->signUp($firstPassengerData);
    }

    public function test_should_send_verification_email_after_create_and_account()
    {
        $firstPassengerData = [
            'name' => $this->faker->name,
            'email' => $this->faker->safeEmail,
            'cpf' => $this->faker->cpf(false),
            'isPassenger' => 1,
        ];
        $passengers = (new AccountService())->signUp($firstPassengerData);
        
    }

}
