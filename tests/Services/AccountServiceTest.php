<?php

namespace Tests\Services;

use App\Services\AccountService;
use PHPUnit\Framework\TestCase;

class AccountServiceTest extends TestCase
{

    private $faker;

    protected function setUp(): void
    {
        $this->faker = \Faker\Factory::create();
        $this->faker->addProvider(new \Faker\Provider\pt_BR\Person($this->faker));
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_should_create_an_passenger()
    {
        $input = [
            'name' => $this->faker->name,
            'email' => $this->faker->email,
            'cpf' => $this->faker->cpf(false),
            'isPassenger' => 1,
        ];
        $accountService = new AccountService();
        $response = $accountService->signUp($input);
        $this->assertNotEmpty($response['account_id']);
    }


//* deve verificar se o email já existe e lançar um erro caso já exista
//* deve gerar o account_id (uuid)
//* deve validar o nome, email e cpf
//* deve gerar o código de verificação da conta
//* deve enviar um email de verificação da conta com um link contendo o código (por enquanto usando um console.log)

}
